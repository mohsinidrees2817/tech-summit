{"ast":null,"code":"// import React, { useState } from \"react\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import {\n//   Elements,\n//   CardElement,\n//   useStripe,\n//   useElements,\n// } from \"@stripe/react-stripe-js\";\n\n// // Load your Stripe publishable key\n// const stripePromise = loadStripe(\"your-publishable-key-here\");\n\n// const CheckoutForm = () => {\n//   const stripe = useStripe();\n//   const elements = useElements();\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [succeeded, setSucceeded] = useState(false);\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     setLoading(true);\n\n//     const { error, paymentMethod } = await stripe.createPaymentMethod({\n//       type: \"card\",\n//       card: elements.getElement(CardElement),\n//     });\n\n//     if (error) {\n//       setError(error.message);\n//       setLoading(false);\n//     } else {\n//       // Use paymentMethod.id to create a payment intent on your server\n//       const response = await fetch(\"/create-payment-intent\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           paymentMethodId: paymentMethod.id,\n//           amount: 1000,\n//         }), // amount in cents\n//       });\n\n//       const paymentIntent = await response.json();\n\n//       if (paymentIntent.error) {\n//         setError(paymentIntent.error.message);\n//         setLoading(false);\n//       } else {\n//         setSucceeded(true);\n//         setLoading(false);\n//       }\n//     }\n//   };\n\n//   return (\n//     <form\n//       onSubmit={handleSubmit}\n//       className=\"max-w-lg mx-auto p-6 bg-white shadow-lg rounded-lg border border-gray-300\"\n//     >\n//       <h2 className=\"text-2xl font-bold mb-6 text-center\">Checkout</h2>\n//       <div className=\"mb-4\">\n//         <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n//           Card Details\n//         </label>\n//         <div className=\"p-3 border border-gray-300 rounded-lg\">\n//           <CardElement\n//             options={{\n//               style: {\n//                 base: {\n//                   fontSize: \"16px\",\n//                   color: \"#32325d\",\n//                   \"::placeholder\": {\n//                     color: \"#a0aec0\",\n//                   },\n//                 },\n//                 invalid: {\n//                   color: \"#fa755a\",\n//                   iconColor: \"#fa755a\",\n//                 },\n//               },\n//             }}\n//           />\n//         </div>\n//       </div>\n//       <button\n//         type=\"submit\"\n//         disabled={!stripe || loading}\n//         className=\"w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors duration-200 disabled:opacity-50\"\n//       >\n//         {loading ? \"Processing...\" : \"Pay\"}\n//       </button>\n//       {error && <div className=\"text-red-500 mt-4 text-center\">{error}</div>}\n//       {succeeded && (\n//         <div className=\"text-green-500 mt-4 text-center\">\n//           Payment succeeded!\n//         </div>\n//       )}\n//     </form>\n//   );\n// };\n\n// const PaymentComponent = () => {\n//   return (\n//     <Elements stripe={stripePromise}>\n//       <CheckoutForm />\n//     </Elements>\n//   );\n// };\n\n// export default PaymentComponent;","map":{"version":3,"names":[],"sources":["/Users/mohsinidrees/Desktop/techsummit/application/client/src/components/checkout.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import {\n//   Elements,\n//   CardElement,\n//   useStripe,\n//   useElements,\n// } from \"@stripe/react-stripe-js\";\n\n// // Load your Stripe publishable key\n// const stripePromise = loadStripe(\"your-publishable-key-here\");\n\n// const CheckoutForm = () => {\n//   const stripe = useStripe();\n//   const elements = useElements();\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [succeeded, setSucceeded] = useState(false);\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     setLoading(true);\n\n//     const { error, paymentMethod } = await stripe.createPaymentMethod({\n//       type: \"card\",\n//       card: elements.getElement(CardElement),\n//     });\n\n//     if (error) {\n//       setError(error.message);\n//       setLoading(false);\n//     } else {\n//       // Use paymentMethod.id to create a payment intent on your server\n//       const response = await fetch(\"/create-payment-intent\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           paymentMethodId: paymentMethod.id,\n//           amount: 1000,\n//         }), // amount in cents\n//       });\n\n//       const paymentIntent = await response.json();\n\n//       if (paymentIntent.error) {\n//         setError(paymentIntent.error.message);\n//         setLoading(false);\n//       } else {\n//         setSucceeded(true);\n//         setLoading(false);\n//       }\n//     }\n//   };\n\n//   return (\n//     <form\n//       onSubmit={handleSubmit}\n//       className=\"max-w-lg mx-auto p-6 bg-white shadow-lg rounded-lg border border-gray-300\"\n//     >\n//       <h2 className=\"text-2xl font-bold mb-6 text-center\">Checkout</h2>\n//       <div className=\"mb-4\">\n//         <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n//           Card Details\n//         </label>\n//         <div className=\"p-3 border border-gray-300 rounded-lg\">\n//           <CardElement\n//             options={{\n//               style: {\n//                 base: {\n//                   fontSize: \"16px\",\n//                   color: \"#32325d\",\n//                   \"::placeholder\": {\n//                     color: \"#a0aec0\",\n//                   },\n//                 },\n//                 invalid: {\n//                   color: \"#fa755a\",\n//                   iconColor: \"#fa755a\",\n//                 },\n//               },\n//             }}\n//           />\n//         </div>\n//       </div>\n//       <button\n//         type=\"submit\"\n//         disabled={!stripe || loading}\n//         className=\"w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors duration-200 disabled:opacity-50\"\n//       >\n//         {loading ? \"Processing...\" : \"Pay\"}\n//       </button>\n//       {error && <div className=\"text-red-500 mt-4 text-center\">{error}</div>}\n//       {succeeded && (\n//         <div className=\"text-green-500 mt-4 text-center\">\n//           Payment succeeded!\n//         </div>\n//       )}\n//     </form>\n//   );\n// };\n\n// const PaymentComponent = () => {\n//   return (\n//     <Elements stripe={stripePromise}>\n//       <CheckoutForm />\n//     </Elements>\n//   );\n// };\n\n// export default PaymentComponent;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}